package example
import akka.stream.ActorMaterializer
import play.api.libs.ws.ahc.StandaloneAhcWSClient
import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits._
import java.io._

object Hello {

  def main(args: Array[String]): Unit = {
<<<<<<< Updated upstream
    val page: String = args(0)
=======
    val page : String = args(0)
>>>>>>> Stashed changes
    implicit val system = ActorSystem()
    implicit val materializer = ActorMaterializer()
    val wsClient = StandaloneAhcWSClient()

<<<<<<< Updated upstream
    call(wsClient,page)
=======
    call(wsClient, page)
>>>>>>> Stashed changes
      .andThen { case _ => wsClient.close() }
      .andThen { case _ => system.terminate() }
  }

  def call(wsClient: StandaloneAhcWSClient, page: String): Future[Unit] = {
<<<<<<< Updated upstream
    wsClient.url(s"https://en.wikipedia.org/w/api.php?action=query&prop=revisions&rvprop=content&format=jsonfm&titles=$page").get().map { response =>
=======
    wsClient.url(page).get().map { response =>
>>>>>>> Stashed changes
      val statusText: String = response.statusText
      val bodyText: String = response.body
      println(s"Got a response $statusText value $bodyText")
      saveFile(bodyText)
    }
  }

<<<<<<< Updated upstream

=======
  def saveFile(content: String) = {
    val writer = new PrintWriter(new File("test.txt" ))
    writer.write(content)
    writer.close()
  }
>>>>>>> Stashed changes
}
